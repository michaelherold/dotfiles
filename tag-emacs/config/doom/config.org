#+title: Literate Doom Configuration

* Introduction

In the interest of teaching myself to better understand Emacs and its configuration, I chose to make my Doom configuration a literate program using Doom's built-in ~:config literate~ module.

The basic idea of this is that you represent your configuration as an ~org-mode~ file that then gets [[https://orgmode.org/manual/Extracting-Source-Code.html][tangled (also known as extracted)]] whenever it updates or you call ~doom sync~.

I have never done something like this before, so if you're reading this in the hopes of learning something /caveat emptor/. If you have a question about something you see, please feel free to [[https://github.com/michaelherold/dotfiles/issues/new][file an issue]] and I will do my best to answer your question. After all, part of the reason for doing this is to teach myself, so I would like to teach you as well.

* Preamble

The first thing that I want to exist in the ~config.el~ file is the preamble that tells Emacs to use [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]] for everything in the file. My understanding, from reading [[https://github.com/hlissner/doom-emacs/blob/f2035811dbda21c3ae6a1de115f508bdef8abccb/docs/faq.org#use-lexical-binding-everywhere][the Doom FAQ]], is that this helps the Emacs Lisp compiler optimize its compilation by turning off dynamic variable assignment.

That seems well and good, so here's what it looks like:

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

A similar preamble needs set for the ~packages.el~ file as well:

#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

Because I use [[https://github.com/thoughtbot/rcm][RCM]] to manage my dotfiles and they exist as symlinks within my ~XDG_CONFIG_HOME~ directory, it appears that the symlink for ~config.org~ does not cause an auto-rebuild upon edit. To work around this issue, I'm directly specifying the location of the link.

This file /must/ exist in the same place on every computer on which I use Emacs.

#+begin_src elisp
(setq +literate-config-file "~/code/dotfiles/tag-emacs/config/doom/config.org")
#+end_src

** TODO File a bug with Doom about this :@computer:
<2021-01-10 Sun>

I can't imagine this is intentional and it feels like a bug.

* Personal information

Various features within Emacs use your name and email address to configure themselves. This is the configuration around those fields, as I discover them. I use a general email address here instead of my usual open source one because I intend the open source email to only be for receiving email, not sending it.

At this time, I don't generally use my middle initial when I write my name, although I do use it in my domain name. I choose to elide it here for unclear reasons.

#+begin_src elisp
(setq user-full-name "Michael Herold"
      user-mail-address "michael@michaeljherold.com")
#+end_src

* Doom configuration

I don't want all of Doom's data files to exist in my profile directory. As such, I set the appropriate variables to ensure the profile directory remains clean.

#+begin_src elisp
(setq doom-local-dir (concat (getenv-internal "XDG_DATA_HOME") "/doom/")
      doom-cache-dir (concat (getenv-internal "XDG_CACHE_HOME") "/doom/"))
#+end_src

* Look and Feel

There isn't much more personal to a computing professional than their text editor. You spend much of your time looking at it, so it behooves you to have it look in a way that is easy to read in all conditions and have a general aesthetic that aligns with yours. It's also a great way to share a little bit of personality with your coworkers when you're pairing!

Anyway, my preferred theme right now is:

#+begin_src elisp
(setq doom-theme 'apropospriate-dark)
#+end_src

This theme is not included by default in Doom, so I need to install it like so:

#+begin_src elisp :tangle packages.el
(package! apropospriate-theme)
#+end_src

When I'm in daylight, I switch to ~apropospriate-light~. That is easily done through a toggle between the two themes that I use:

#+begin_src elisp
(defun mjh-toggle-theme ()
  (interactive)
  (if (eq doom-theme 'apropospriate-dark)
      (load-theme 'apropospriate-light)
    (load-theme 'apropospriate-dark)))

(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle theme" "t" #'mjh-toggle-theme))
#+end_src

On my Linux machines, I have been trying to fight with ~fontconfig~ to ensure that it aliases my [[https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode][Nerd Font version of Fira Code]] as Fira Code to match my macOS machine. That is proving frustrating, so I am instead toggling the family based on whether the host runs Linux.

Because my different computers have monitors at different resolution, I decided to switch on ~system-name~ to decide what font size I use.

The variable pitch font is for when I'm writing in Org. I really enjoy the variable pitch for writing via [[*Mixed pitch][mixed-pitch]]. I went a little larger for it because it balances out against the fixed-pitch nicely.

#+begin_src elisp
(let ((font-family "FiraCode Nerd Font")
      (font-size (pcase (system-name)
                   ("michael-herold" 24)  ;; Work laptop - Macbook Pro
                   ("zeromus" 16)         ;; Personal desktop - 1080p
                   (_ 16))))              ;; Safe fallback
  (setq doom-font (font-spec :family font-family :size font-size))
  (setq doom-variable-pitch-font (font-spec :family "Fira Sans" :size (floor (* font-size 1.25)) :weight 'light)))
#+end_src

The big font increment is for when I toggle on the big mode. I do this sometimes when my eyes are feeling tired, usually at night.

#+begin_src elisp
(setq doom-big-font-increment 2)
#+end_src

Since I am an ex-Vim user, I prefer to use Vim motions for moving around files. Jumping lines in large blocks with accuracy is easier with relative line numbers. Supposedly, relative line numbers can introduce some slowdown in Emacs, but so far I haven't noticed any slowdown from using this setting.

#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

** Mixed pitch

Mixed pitch mode is nice in theory, but it ignores a mismatch in weight. As such, I needed to patch it. I don't believe my patch is doable using advice only, so I forked the repository and use my fork instead of upstream.

#+begin_src elisp :tangle packages.el
(package! mixed-pitch
  :recipe (:host gitlab :repo "michaelherold/mixed-pitch" :branch "respect-weights")
  :pin "25151d96bd101ee99341115bfe9a141316e26deb")
#+end_src

I want to use ~mixed-pitch~ by default in Org mode, so I set up a hook to enable it automatically:

#+begin_src elisp
(add-hook! org-mode 'mixed-pitch-mode)
#+end_src

** Toggling current line highlighting

I like to have the current line highlighted to give me more information about where my cursor is at any given time. However, this mode interferes with seeing the current face of the character my cursor is on. As such, I want to be able to easily turn the mode off, so I add a key binding in Doom's "toggle" section to do just that:

#+begin_src elisp
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Highlight current line" "h" #'hl-line-mode))
#+end_src

** TODO Consider adding a ~fontconfig~ tangle here :@computer:
:PROPERTIES:
:CREATED: <2021-01-09 Sat>
:END:

It could be interesting to tangle a ~fontconfig~ configuration for that here, but since I'm new to this, I will consider that at a later date.

* Completion and IDE behavior

Company pops up the completion dialog after a short delay. This ends up being visually distracting more than it is helpful, at least in the current tech stacks in which I work. Instead of letting it try to auto-complete for me on a timer, I'm choosing to make it so I have to use =C-SPC= to pop up the completion dialog on demand. There's a little bit of lag from the time I hit =C-SPC=, but I /think/ that is only the first time you run Company in a project. To switch to this behavior, turn off the delay:

#+begin_src elisp
(setq company-idle-delay nil)
#+end_src

* Evil customization

Firstly, let's take a moment to giggle at the name of Emacs' Vim emulation: ~evil-mode~. I know that there's a faux war that has been waging since the 70s or 80s between the two editors, but that it's still called this is hilarious to me.

Anyway, the author of Doom was a heavy Vim user for a long time so he tries his best to honor all Vim motions and common plugins in Doom. Thus far, this has meant that I have had little to customize to my liking, which is great!

When I split a window, I always want to switch to that window instead of remaining on the origin. These two variables accomplish that goal, though you wouldn't know it by looking at them.

#+begin_src elisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

I used ~vim-surround~ for years when I was in Vim but never internalized how it worked. The first thing that really clicked with me was Spacemacs' mapping for ~evil-surround-region~. ~evil-snipe~ is not something that I use enough so I override its default assignment here to the one that I prefer for ~evil-surround-region~.

#+begin_src elisp
(map! :v "s" #'evil-surround-region)
#+end_src

Doom tries to be helpful by autofilling paragraphs of comments using ~fill-region-as-paragraph~. This means that if your line will wrap at the fill column, the join does not happen as expected. This behavior is more irritating than the joining of comments for me. As such, I am disabling this functionality until I can come back to it.

#+begin_src elisp
(advice-remove 'evil-join #'+evil-join-a)
#+end_src

** TODO File a bug about ~+evil-join-a~ :@computer:
<2021-01-11 Mon>

I believe that to be a bug in [[https://github.com/hlissner/doom-emacs/blob/fc184852d0236769c971e94ec5ec220d8cd24fd1/modules/editor/evil/autoload/advice.el#L181-L203][the way that Doom implements ~+evil-join-a~]], but I don't see where the bug is.

* Spell-check configuration

Instead of relying on the heavyweight ~flyspell~, I am trying out ~spell-fu~, which only sends the visible words for the buffer to the spell-checker. It requires you to set the ~ispell-dictionary~ variable instead of trying to infer it from your locale. Since I primarily speak English, I set it as such here:

#+begin_src elisp
(setq ispell-dictionary "en")
#+end_src

** TODO Consider submitting a patch to Doom to infer your dictionary when unset :@computer:
:PROPERTIES:
:CREATED:  <2021-01-09 Sat>
:END:

I wasn't able to use ~z =~ initially because it was complaining about this variable being unset. Perhaps we can infer from the ~$LANG~ environment variable what it should be, by default?

It [[https://stackoverflow.com/questions/1610337/how-can-i-find-the-current-windows-language-from-cmd][seems hard in Windows]] but we could easily gate the behavior using the ~IS-LINUX~ constant and use ~setq-default~.

* Org mode

Hoo boy, Org mode. This is the make-or-break feature for Emacs for many people. I'm giving it another try this year and am starting slowly. I expect this configuration to grow more than any other bit of configuration in this file. I also expect it to be the highest-churn part of my dotfile configuration for a while yet.

All helper functions live in ~autoload/mjh-org.el~, which I initialize with a preamble here:

#+begin_src elisp :tangle autoload/mjh-org.el :mkdirp yes
;;; autoload/mjh-org.el  -*- lexical-binding: t; -*-
#+end_src

I have been on a crusade lately to rid my ~$HOME~ directory of configuration files so that the only things that are there are the [[https://wiki.archlinux.org/index.php/XDG_Base_Directory][XDG Base Directories]]. Since Org files are content, though, I am happy to have my Org folder live there, so I set it as such:

#+begin_src elisp
(setq org-directory "~/org/")
#+end_src

I saw a nice ellipsis configuration in [[https://github.com/jethrokuan/dots/blob/8b8bd2239a17ed8dcdb11c9b6b81a2d759be2661/.doom.d/config.el#L18][Jethro Kuan's dotfiles]] using the "down-pointing triangle" Unicode character, so I cribbed it:

#+begin_src elisp
(setq org-ellipsis " ▼ ")
#+end_src

I'd rather not see the emphasis markers and instead see just the change in face. This makes it seem less like I'm writing in plain text, which is kind of fun.

#+begin_src elisp
(setq org-hide-emphasis-markers t)
#+end_src

However, I find it frustrating to edit emphasis markers when hiding them. By using ~org-appear~, I can see the markers when I enter into their blocks.

#+begin_src elisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode))
#+end_src

I enjoy using ~org-habit~ to track my habits that I am trying to build. It is not enabled by default in Doom's configuration, so I do that here. I feel like there should be a cleaner way of doing this, but I haven't figured out how.

My preferred theme does not stylize the habit tracker out-of-the-box, so I also define some faces here to match.

#+begin_src elisp
(after! org
  (require 'org-habit)

  (add-to-list 'org-modules 'org-habit t)

  (custom-theme-set-faces! 'apropospriate-dark
    '(org-habit-alert-face :foreground "#424242" :background "#FFEE9D")
    '(org-habit-alert-future-face :background "#FFEE58")
    '(org-habit-clear-face :background "#E1BEE7")
    '(org-habit-clear-future-face :background "#9575CD")
    '(org-habit-overdue-face :background "#E57373")
    '(org-habit-overdue-future-face :background "#EF9A9A")
    '(org-habit-ready-face :foreground "#424242" :background "#C5E1A5")
    '(org-habit-ready-future-face :background "#F4FF81"))

  (custom-theme-set-faces! 'apropospriate-light
    '(org-habit-alert-face :foreground "#424242" :background "#F9A725")
    '(org-habit-alert-future-face :background "#F57F17")
    '(org-habit-clear-face :background "#7E57C2")
    '(org-habit-clear-future-face :background "#B388FF")
    '(org-habit-overdue-face :background "#D50000")
    '(org-habit-overdue-future-face :background "#FF1744")
    '(org-habit-ready-face :foreground "#424242" :background "#66BB6A")
    '(org-habit-ready-future-face :background "#558B2F")))
#+end_src

Doom has an interesting setup for ~org-todo-keywords~ where he also includes checklist items in Org agendas. I don't really want to use that functionality and I want to start off with a simple setup. So far, this is as follows:

- Items that need doing, whether I have started them or not, exist in the ~TODO~ status.
- If I am waiting on someone else to do a task, I put the task in the ~WAITING~ status. I use ~@~ because I want to make sure I notate who I am waiting on and what I am waiting for. I also use ~!~ because I want to note the time that I put the task into ~WAITING~ status.
- When I finish a task, I mark it as ~DONE~. When I do so, I want to note the time that I finished it, so I added the ~!~ flag.
- When I or someone else cancels a task, I don't want to delete it; I want to mark it as ~CANCELLED~ with the reason for cancellation (~@~) and the time (~!~).
- Both ~DONE~ and ~CANCELLED~ are terminal states.

Meetings have a separate lifecycle from tasks.

- A meeting starts in the ~MEETING~ state when I get a notice for it.
- I transition to ~AGENDA~ once I have notes on what the meeting is about and my role in it.
- During the meeting, I take ~MINUTES~ on the task, which is the terminal state for meetings.
- Meetings may also be ~CANCELLED~ like a task.

As a miscellaneous task, I also have a ~PHONE~ terminal state that I use for taking notes during phone calls.

I set these as advice to a Doom method because Doom initializes all of these things when Org loads for the first time.

#+begin_src elisp
(defun +mjh-org-init-appearance-h ()
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "WAITING(w@/!)"
           "|"
           "DONE(d!)"
           "CANCELLED(c@/!)")
          (sequence
           "MEETING"
           "AGENDA(a@/!)"
           "|"
           "MINUTES(m@/!)")
          (type "PHONE"))))

(advice-add '+org-init-appearance-h :after #'+mjh-org-init-appearance-h)
#+end_src

In the cases where I use [[https://orgmode.org/manual/Breaking-Down-Tasks.html][summary statistics]] to track progress on a task, I don't want to have to mark the task as ~DONE~ manually when I finish the last of the sub-entries. I accomplish this through a simple function that I cribbed from the Org mode manual. I made a slight modification; I do want to log the time the change happened, so I dropped that line.

#+begin_src elisp
(after! org
  (add-hook! #'org-after-todo-statistics-hook #'mjh/org-summary-todo-h))
#+end_src

#+begin_src elisp :tangle autoload/mjh-org.el
;;;###autoload
(defun mjh/org-summary-todo-h (_n-done n-not-done)
  "Switch entry to DONE when all sub-entries are done, to TODO otherwise.

Since this is a hook, it takes N-DONE and N-NOT-DONE to conform to the
interface."

  (org-todo (if (= n-not-done 0) "DONE" "TODO")))
#+end_src

When finishing tasks, I want to note when I finished them. However, I don't want the state change information to go into the body of the note; I want it in the ~LOGBOOK~ property:

#+begin_src elisp
(setq org-log-into-drawer t)
#+end_src

** Agenda

When showing tasks for the day, I want to make sure I'm including notes from my dailies, so this adds advice to the appropriate Doom hook for working with ~org-agenda-files~. I also really only care about today's agenda when I open it initially, so I override the span and start date from Doom's defaults.

#+begin_src elisp
(defun +mjh-org-init-agenda-h ()
  (setq org-agenda-files (list "~/org/" "~/org/journal/" "~/.config/doom/config.org")
        org-agenda-span 'day
        org-agenda-start-day nil))

(advice-add '+org-init-agenda-h :after #'+mjh-org-init-agenda-h)
#+end_src

I find the weekly view of my agenda to be a little overwhelming, so I want to toggle between time spans easily. This allows me to do that:

#+begin_src elisp
(map! :after org-agenda
      :map org-agenda-mode-map
      :localleader
      (:prefix ("@" . "timespan")
       "d" #'org-agenda-day-view
       "m" #'org-agenda-month-view
       "w" #'org-agenda-week-view))
#+end_src

When looking at the agenda, I like to see what I've worked on, so I enable ~org-agenda-start-with-log-mode~.

#+begin_src elisp
(setq org-agenda-start-with-log-mode t
      org-agenda-custom-commands
      `(("d" "Dashboard"
         ((agenda "" ((org-deadline-warning-days 7)))
          (tags-todo "+PRIORITY=\"A\"-SCHEDULED"
                     ((org-agenda-overriding-header "High Priority")))
          (tags-todo "-STYLE=\"habit\""
                ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                 (org-agenda-files '(,(concat org-directory "life.org")
                                     ,(concat org-directory "work.org")))
                 (org-agenda-text-search-extra-files nil)))))))
#+end_src

** Capture

While Doom's capture templates are really interesting, they don't really work for how I want to organize my life. So I'm rolling my own capture templates.

I want a better way to write to my Org journal without leaving the buffer open, so I'm starting from the recommended capture templates in their readme. This function opens the current journal location for Org capture to write to.

#+begin_src elisp :tangle autoload/mjh-org.el
;;;###autoload
(defun +mjh-org-journal-find-location ()
  "Go to the location for a Org journal entry for the current time."
  (org-journal-new-entry t)
  (org-narrow-to-subtree)
  (goto-char (point-max)))
#+end_src

And for scheduling future entries, I need a variable in which to save the scheduled time:

#+begin_src elisp
(defvar mjh-org-journal--date-location-scheduled-time nil)
#+end_src

And an auto-loaded function for setting it while getting the journal location:

#+begin_src elisp :tangle autoload/mjh-org.el
;;;###autoload
(defun +mjh-org-journal-date-location (&optional scheduled-time)
  "Go to the location for a scheduled Org journal entry at SCHEDULED-TIME or, if
  not given, ask for it first."
  (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil "Date:"))))
    (setq mjh-org-journal--date-location-scheduled-time scheduled-time)
    (org-journal-new-entry t (org-time-string-to-time scheduled-time))
    (org-narrow-to-subtree)
    (goto-char (point-max))))
#+end_src

To prevent the variable from potentially affecting future captures, I want to make sure to clear it once we finalize the capture. To do that, I create a simple auto-loaded function:

#+begin_src elisp :tangle autoload/mjh-org.el
;;;###autoload
(defun mjh-org-journal--clear-time ()
    (setq mjh-org-journal--date-location-scheduled-time nil))
#+end_src

And add it to the hook that Org calls after capture:

#+begin_src elisp
(add-hook! (org-capture-after-finalize) :append #'mjh-org-journal--clear-time)
#+end_src

Now we come to the capture templates. Currently, I have a few different places where I want to capture information:

- Personal todos - These are tasks that are not work-related. They might be family- or household-related, or they could be things to read or watch. They live in a general file I call "Life" for now. I'm considering moving these to my journal but that's harder to implement in Orgzly, which I use when I'm not at my computer.
- Work todos - These are tasks that are work-related.
- Journal entry - This is an entry in my Org journal. I use it to track what I'm doing throughout the day. I am still building this habit.
- Scheduled journal entry - This is an entry in my Org journal in the future. I'm thinking it will help me organize tasks that I want to do on a specific day.

#+begin_src elisp
(after! org
  (setq org-capture-templates
        '(("t" "Personal todo" entry (file+headline "~/org/life.org" "Inbox")
           "* TODO %?\n%T\n%a\n")
          ("w" "Work todo" entry (file+headline "~/org/work.org" "Inbox")
           "* TODO %? :work:\n%T\n%a\n")
          ("j" "Journal entry" plain #'+mjh-org-journal-find-location
           "** %(format-time-string org-journal-time-format)%?\n"
           :kill-buffer t)
          ("J" "Scheduled journal entry" plain #'+mjh-org-journal-date-location
           "** TODO %?\n <%(princ mjh-org-journal--date-location-scheduled-time)>\n"))))
#+end_src

** Journal

I switched to using ~org-journal~ for my journal-like activities from ~org-roam~'s dailies. The dailies functionality just doesn't have what I'm looking for. To keep the structure similar, I use daily journals, though I'm considering monthly or yearly journal files. I want my journal entries to be part of my agenda, so I ensure the directory exists in the list.

#+begin_src elisp
(after! org-journal
  (setq org-journal-created-property-timestamp-format "%Y-%m-%d"
        org-journal-date-format "%Y-%m-%d (%A)"
        org-journal-enable-agenda-integration t
        org-journal-file-format "%Y-%m.org"
        org-journal-file-type 'monthly
        org-journal-dir (concat org-directory "journal")))
#+end_src

** Roam

As a knowledge management solution, I settled on trying the ~org-roam~ package, which brings some of the behavior of [[https://roamresearch.com/][Roam Research]] into Org mode. I intend to build a Zettelkasten, or "slip box", using it. As of yet, I have not made a lot of progress on this.

My Zettelkasten is, for now, set as below. It lives in a separate Git repository than this configuration.

#+begin_src elisp
(setq org-roam-directory (concat org-directory "roam/"))
#+end_src

The process of capturing notes in my Roam configuration is still a work in progress.

#+begin_src elisp
(setq org-roam-capture-templates
      '(("d" "default" plain "%?" :target
         (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
         :unnarrowed t)
        ("a" "Article" plain "%?" :target
         (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :article:\n")
         :unnarrowed t)
        ("b" "Blog" plain "%?" :target
         (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :blog:\n")
         :unnarrowed t)
        ("B" "Book" plain "%?" :target
         (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :book:\n")
         :unnarrowed t)
        ("l" "Location" plain "%?" :target
         (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :location:\n")
         :unnarrowed t)
        ("p" "Person" plain "%?" :target
         (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :person:\n\n+ Title ::\n+ Company ::\n+ Phone numbers ::\n+ Location ::\n")
         :unnarrowed t)))
#+end_src

#+begin_src elisp
(setq org-roam-dailies-capture-templates
      '(("d" "default" entry "* %?" :target
         (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n\n* [[id:9e332f95-ef6b-41f5-974c-154504d1b23d][Top of Mind]]\n"))))
#+end_src

#+begin_src elisp :tangle packages.el
(package! org-roam-ui
  :recipe (:host github :repo "org-roam/org-roam-ui")
  :pin "05d7de409e92dbf3d6b8ef50da0b743c247b4eac")
#+end_src

** Smartparens

Note: the configuration in this section is the biggest hammer I could think of. Smartparens loads its configuration lazily, causing changes to pairs for Org mode when Org loads for the first time. This causes any configuration that I do with ~after! org~ or even ~defer-until! (featurep smartparens-org)~ to be wiped out. I can't figure out a better way of doing this, but the changes fix things that were too annoying not to shim this in.

The automatic pairing for smartparens' =`= pair gets applied within Org mode when it shouldn't. Also, the ='= pair is irritating when I am modifying my literate configuration because it tries to pair when I'm writing elisp.

#+begin_src elisp
(add-hook! org-mode :append
  (sp-local-pair 'org-mode "`" nil :actions :rem)
  (sp-local-pair 'org-mode "'" nil :actions :rem))
#+end_src

* Miscellaneous
** Editing udev rules

When editing ~udev~ rules, it's easy to make a syntax error since you're writing a long line of comma-delimited fields. Having an editing mode for that purpose helps to prevent mistakes. So let's install one:

#+begin_src elisp :tangle packages.el
(package! udev-mode)
#+end_src

** Using Emacs to edit textboxes in the browser

#+begin_src elisp :tangle packages.el
(package! atomic-chrome)
#+end_src

#+begin_src elisp
(use-package! atomic-chrome
  :after-call focus-out-hook
  :config
  (setq atomic-chrome-buffer-open-style 'frame
        atomic-chrome-default-major-mode 'markdown-mode)
  (atomic-chrome-start-server))
#+end_src

** GraphQL

#+begin_src elisp :tangle packages.el
(package! graphql-mode)
#+end_src

** Wakatime

I like to track my time on different projects using the Wakatime service. To do so, it's easiest to use its global mode, so I enable that here unless I'm on a work computer, where it isn't allowed:

#+begin_src elisp :tangle packages.el
(unless (getenv "NO_WAKATIME")
  (package! wakatime-mode))
#+end_src

#+begin_src elisp
(unless (getenv "NO_WAKATIME")
  (use-package! wakatime-mode
    :config
    (global-wakatime-mode +1)))
#+end_src

** Cucumber

#+begin_src elisp :tangle packages.el
(package! feature-mode)
#+end_src

#+begin_src elisp
(use-package! feature-mode)
#+end_src

**  Shadowenv

#+begin_src elisp :tangle packages.el
(package! shadowenv)
#+end_src

#+begin_src elisp
(use-package! shadowenv
  :hook (after-init . shadowenv-global-mode))
#+end_src

** Meson

#+begin_src elisp :tangle packages.el
(package! meson-mode)
#+end_src

#+begin_src elisp
(use-package! meson-mode)
#+end_src

** Sway

[[https://swaywm.org/][Sway]] uses the same configuration language as [[https://i3wm.org/][i3]] so install that package for highlighting.

#+begin_src elisp :tangle packages.el
(package! i3wm-config-mode)
#+end_src

#+begin_src elisp
(use-package! i3wm-config-mode
  :config
  (add-to-list 'auto-mode-alist '("sway/config\\'" . i3wm-config-mode)))
#+end_src

** Systemd

#+begin_src elisp :tangle packages.el
(package! systemd)
#+end_src

#+begin_src elisp
(use-package! systemd)
#+end_src

** Searching for things at point

#+begin_src emacs-lisp
(defun +vertico/search-project-for-symbol-at-point (&optional arg)
  "Performs a live project search from the project root for the symbol at point.

If ARG (universal argument), include all files, even hidden or compressed ones,
in the search."
  (interactive)
  (+vertico/project-search arg (thing-at-point 'symbol)))

(map! :leader
      (:prefix-map ("s" . "search")
       :desc "Seach project for thing at point" "P" #'+vertico/search-project-for-symbol-at-point))
#+end_src

** Searching for things in the current file

#+begin_src emacs-lisp
(define-key global-map [remap isearch-backward] 'consult-line)
(define-key global-map [remap isearch-forward] 'consult-line)
#+end_src
